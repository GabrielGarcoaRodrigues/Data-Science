# -*- coding: utf-8 -*-
"""Identificando e Removendo Outliers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o4g2NdH4oSsHlTXj19kt6VHymFDSWQHF

#Relatório de análise VIII

##Identificando e Removendo outliers
"""

import pandas as pd
import matplotlib.pyplot as plt
plt.rc('figure', figsize = (14, 6))

dados = pd.read_csv('aluguel_residencial3.csv', sep = ';')
dados.head()

dados.boxplot(['Valor'])

dados[dados['Valor'] >= 500000]

valor = dados['Valor']

Q1 = valor.quantile(.25)
Q3 = valor.quantile(.75)
IIQ = Q3 - Q1
limite_inferior = Q1 - 1.5 * IIQ
limite_superior = Q3 + 1.5 * IIQ

selecao = (valor >= limite_inferior) & (valor <= limite_superior)
dados_new = dados[selecao]

dados_new.boxplot(['Valor'])

dados_new.hist(['Valor'])
dados.hist(['Valor'])

dados.boxplot(['Valor'], by = ['Tipo'])

grupo_tipo = dados.groupby('Tipo')['Valor']
Q1 = grupo_tipo.quantile(.25)
Q3 = grupo_tipo.quantile(.75)
IIQ = Q3 - Q1
limite_inferior = Q1 - 1.5 * IIQ
limite_superior = Q3 + 1.5 * IIQ

Q1

Q3

IIQ

limite_inferior

limite_superior['Apartamento']

dados_new = pd.DataFrame()
for tipo in grupo_tipo.groups.keys():
  eh_tipo = dados['Tipo'] == tipo
  eh_dentro_limite = (dados['Valor'] >= limite_inferior[tipo]) & (dados['Valor'] <= limite_superior[tipo])
  selecao = eh_tipo & eh_dentro_limite
  dados_selecao = dados[selecao]
  dados_new = pd.concat([dados_new, dados_selecao])

dados_new.boxplot(['Valor'], by = ['Tipo'])

"""#Mais sobre gráficos"""

dados.head()
area = plt.figure()

g1 = area.add_subplot(2, 2, 1)
g2 = area.add_subplot(2, 2, 2)
g3 = area.add_subplot(2, 2, 3)
g4 = area.add_subplot(2, 2, 4)

from pandas.io.formats.format import get_format_timedelta64
g1.scatter(dados.Valor, dados.Area)
g1.set_title('Valor x Area')

g2.hist(dados.Valor)
g2.set_title('Histograma')

dados_g3 = dados.Valor.sample(100)
dados_g3.index = range(1, dados_g3.shape[0]+1)
g3.plot(dados_g3)
g3.set_title('Amostra valor')

grupo = dados.groupby('Tipo')['Valor']
g4.bar(grupo.mean().index, grupo.mean().values)
g4.set_title('Valor medio por tipo')


area